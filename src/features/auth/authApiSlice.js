import { apiSlice } from '../../app/api/apiSlice'
import { logOut, setCredentials } from './authSlice'


export const authApiSlice = apiSlice.injectEndpoints({
    endpoints: builder => ({
        login: builder.mutation({
            //username and password we send with the query
            query: credentials => ({
                url: '/auth',
                method: 'POST',
                body: { ...credentials }
            })
        }),
        sendLogout: builder.mutation({
            query: () => ({
                url: '/auth/logout',
                method: 'POST',
            }),
            async onQueryStarted(arg, { dispatch, queryFulfilled }) {
                try {
                    const {data} =  await queryFulfilled
                    console.log(data) //we can put in a const the queryFulfilled and see the "cookie cleared" message
                    dispatch(logOut())
                    setTimeout(() => {
                        //this will clear out the cache and the query subscriptions
                        dispatch(apiSlice.util.resetApiState())
                    }, 1000)
                    
                } catch (err) {
                    console.log(err)
                }
            }
        }),
        
        refresh: builder.mutation({
            query: () => ({
                url: '/auth/refresh',
                method: 'GET',
            }),
            async onQueryStarted(arg, { dispatch, queryFulfilled }) {
                try {
                    const { data } = await queryFulfilled
                    console.log(data)
                    const { accessToken } = data
                    //every time we use our refresh mutation, it will set the credentials as well
                    dispatch(setCredentials({accessToken}))
                } catch (err) {
                    console.log(err)
                }
            }
        }),
    })
})

export const {
    useLoginMutation,
    useSendLogoutMutation,
    useRefreshMutation,
} = authApiSlice 

/*
  The authApiSlice module configures and provides authentication-related API endpoints using the apiSlice.injectEndpoints method from the apiSlice module.

  The module consists of the following main elements:

  - Import Statements: The necessary modules and functions are imported, including apiSlice, logOut, and setCredentials from the authSlice module.

  - authApiSlice: This variable holds the result of calling apiSlice.injectEndpoints(). It configures the authentication-related endpoints using the provided builder function.

    - login: This endpoint represents the login functionality. It is configured as a mutation with a POST request to the /auth URL. The credentials object is passed as the request body.

    - sendLogout: This endpoint represents the logout functionality. It is configured as a mutation with a POST request to the /auth/logout URL. The onQueryStarted function is used to dispatch the logOut action, clear the API state, and perform additional logic after the query is fulfilled.

    - refresh: This endpoint represents the token refresh functionality. It is configured as a mutation with a GET request to the /auth/refresh URL. The onQueryStarted function is used to update the credentials with the new access token received from the response.

  - useLoginMutation, useSendLogoutMutation, useRefreshMutation: These exported hooks provide convenient access to the corresponding authentication-related mutation functions generated by authApiSlice. They can be used in components to interact with the API endpoints.

  The authApiSlice module enhances the application by providing a centralized and configurable way to handle authentication-related API requests. It simplifies the process of making API calls for login, logout, and token refresh operations. The provided hooks offer an easy-to-use interface for interacting with these endpoints in components.

  By organizing authentication-related API functionality in a separate module, the codebase becomes more modular and maintainable. Developers can easily integrate these authentication endpoints into their application by using the provided hooks.
*/
