import { useRef, useState, useEffect } from 'react'
import { useNavigate, Link } from 'react-router-dom'
import { useDispatch } from 'react-redux'
import { setCredentials } from './authSlice'
import { useLoginMutation } from './authApiSlice'
import usePersist from '../../hooks/usePersist'
import PulseLoader from 'react-spinners/PulseLoader'

const Login = () => {
  const userRef = useRef()
  const errRef = useRef()
  const [username, setUsername] = useState('')
  const [password, setPassword] = useState('')
  const [errMsg, setErrMsg] = useState('')
  const [persist,setPersist] = usePersist()
  const navigate = useNavigate()
  const dispatch = useDispatch()

  const [login, { isLoading }] = useLoginMutation()

  useEffect(() => {
    userRef.current.focus()
  }, [])
  
  useEffect(() => {
    setErrMsg('')
  }, [username, password])
  
  const handleSubmit = async (e) => {
    e.preventDefault()
    try {
      const { accessToken } = await login({ username, password }).unwrap()
      dispatch(setCredentials({ accessToken }))
      setUsername('')
      setPassword('')
      navigate('/dash')
    } catch (err) {
      if (!err.status) {
         setErrMsg('No Response From Server, Try Again Later!')
      } else if (err.status === 400) {
        setErrMsg('Missing Username Or Password')
      } else if (err.status === 401) {
        setErrMsg('Unauthorized')
      } else {
        setErrMsg(err.data?.message)
      }
      errRef.current.focus()
    }
  }

  const handleUserInput = (e) => setUsername(e.target.value)
  const handlePwdInput = (e) => setPassword(e.target.value)
  const handleToggle  = () => setPersist(prev => !prev)
  
  
  const errClass = errMsg ? "errmsg" : "offscreen"
  if (isLoading) return <PulseLoader color={"#FFF"} />
  
  const content = (
    <section className="public">
      <header>
        <h1>Employee Login</h1>
      </header>
      <main className="login">
      <p ref={errRef} className={errClass} aria-live="assertive">{errMsg}</p>

<form className="form" onSubmit={handleSubmit}>
    <label htmlFor="username">Username:</label>
    <input
        className="form__input"
        type="text"
        id="username"
        ref={userRef}
        value={username}
        onChange={handleUserInput}
        autoComplete="off"
        required
    />

    <label htmlFor="password">Password:</label>
    <input
        className="form__input"
        type="password"
        id="password"
        onChange={handlePwdInput}
        value={password}
        required
    />
          <button className="form__submit-button">Login</button>
          <label htmlFor='persist' className='form__persist'>
            <input type='checkbox' className='form__checkbox' id='persist'
              onChange={handleToggle}
              checked={persist} />
            Trust device!
          </label>
</form>
      </main>
      <footer>
        <Link to="/">Home</Link>
      </footer>
    </section>
  )


  return content
};

export default Login;

/*
  The Login component represents the login page for the TaskFlow application.
  It allows users to enter their username and password, submit the login form, and authenticate themselves.

  The component consists of the following main elements:

  - useRef: The userRef and errRef are used to create references to the username input field and the error message element, respectively.

  - useState: The username, password, and errMsg states are used to manage the values entered in the username and password fields, as well as the error message displayed to the user.

  - usePersist: The persist state and setPersist function are obtained from the usePersist custom hook, which manages the persistent login functionality.

  - useNavigate: The navigate function is used from the useNavigate hook to enable programmatic navigation to the '/dash' route upon successful login.

  - useDispatch: The useDispatch function is used to get the dispatch function from React Redux, which is used to dispatch the setCredentials action.
  
  - useLoginMutation: The login function and isLoading flag are obtained from the useLoginMutation hook, which is generated by the authApiSlice and handles the login API request.

  - useEffect: Two useEffect hooks are used. The first one focuses on the username input field when the component mounts, and the second one clears the error message whenever the username or password changes.

  - handleSubmit: This function is called when the login form is submitted. It sends the login API request, dispatches the setCredentials action with the received access token, clears the username and password fields, and navigates to the '/dash' route upon successful login. If an error occurs, it sets the appropriate error message and focuses on the error message element.

  - handleUserInput, handlePwdInput: These functions update the username and password states based on user input.

  - handleToggle: This function toggles the persist state when the user checks or unchecks the "Trust device!" checkbox.

  - errClass: This variable determines the CSS class for displaying the error message.

  - Conditional Rendering: If the isLoading flag is true, a PulseLoader component is rendered to display a loading spinner.

  - JSX Content: The JSX content of the login page, including the form, input fields, error message, and navigation link to the home page.

  Overall, the Login component provides the user interface for the login page of the TaskFlow application. It allows users to enter their credentials, handles the login process, displays error messages if applicable, and offers a persistent login option.
*/

