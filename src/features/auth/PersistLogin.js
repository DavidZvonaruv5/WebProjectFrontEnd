import { Outlet, Link } from "react-router-dom"
import { useEffect, useRef, useState } from 'react'
import { useRefreshMutation } from "./authApiSlice"
import usePersist from "../../hooks/usePersist"
import { useSelector } from 'react-redux'
import { selectCurrentToken } from "./authSlice"
import PulseLoader from 'react-spinners/PulseLoader'

const PersistLogin = () => {

    const [persist] = usePersist()
    const token = useSelector(selectCurrentToken)
    const effectRan = useRef(false)

    const [trueSuccess, setTrueSuccess] = useState(false)

    //Just like all of the mutations we are using
    const [refresh, {
        isUninitialized,
        isLoading,
        isSuccess,
        isError,
        error
    }] = useRefreshMutation()

    useEffect(() => {

        if (effectRan.current === true || process.env.NODE_ENV !== 'development') { 

            const verifyRefreshToken = async () => {
                console.log('verifying refresh token')
                try {
                    //const response = 
                    await refresh()
                    //const { accessToken } = response.data
                    setTrueSuccess(true)
                }
                catch (err) {
                    console.error(err)
                }
            }

            //if we don't have a token and presist is true then we need to verify the refresh token
            if (!token && persist) verifyRefreshToken()
        }

        return () => effectRan.current = true
        // this line will remove unneccesary errors
        // eslint-disable-next-line
    }, [])


    let content
    if (!persist) { 
        console.log('no persist')
        content = <Outlet />
    } else if (isLoading) { 
        console.log('loading')
        content = <PulseLoader color={"#FFF"} />
    } else if (isError) { 
        console.log('error')
        content = (
            <p className='errmsg'>
                {`${error?.data?.message} - `}
                <Link to="/login">Please login again</Link>.
            </p>
        )
    } else if (isSuccess && trueSuccess) { 
        console.log('success')
        content = <Outlet />
    } else if (token && isUninitialized) { 
        console.log('token and uninit')
        console.log(isUninitialized)
        content = <Outlet />
    }

    return content
}
export default PersistLogin

/*
  The PersistLogin component handles the persistence of user authentication in the TaskFlow application.
  It checks if the persistent login option is enabled and performs the necessary actions to maintain the user's authenticated state.

  The component consists of the following main elements:

  - usePersist: The persist state is obtained from the usePersist custom hook, which manages the persistent login functionality.

  - token: The current token is obtained from the Redux store using the useSelector hook and the selectCurrentToken selector from the authSlice module.

  - effectRan: A ref is used to track if the useEffect callback has run before to prevent multiple executions in certain scenarios.
  
  - useRefreshMutation: The refresh function and related state flags are obtained from the useRefreshMutation hook, which is generated by the authApiSlice and handles the token refresh API request.

  - useEffect: The useEffect hook is used to perform the necessary actions when the component mounts.
    - If the effect has not run before and the environment is not in development mode, it verifies the refresh token by calling the refresh function from the authApiSlice.
    - If there is no current token and the persistent login option is enabled, the refresh token is verified.
    - The effect also returns a cleanup function to set the effectRan ref to true.

  - Conditional Rendering: The component conditionally renders different content based on the state flags and conditions:
    - If the persistent login option is disabled, the Outlet component is rendered.
    - If the token refresh request is in progress, a loading spinner is rendered.
    - If there is an error in the refresh process, an error message is rendered with a link to the login page.
    - If the refresh process is successful and the trueSuccess flag is set, the Outlet component is rendered.
    - If there is a current token and the authApiSlice is uninitialized, the Outlet component is rendered.
*/
